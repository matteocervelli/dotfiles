version: '3.8'

# Infrastructure Stack - PostgreSQL + Redis + Nginx + Exporters
# Production-ready database, cache, and reverse proxy configuration
#
# Services:
#   - PostgreSQL: Relational database (port 5432)
#   - Redis: Cache and message broker (port 6379)
#   - Nginx: Reverse proxy and load balancer (ports 80, 443)
#   - Postgres Exporter: PostgreSQL metrics (port 9187)
#   - Redis Exporter: Redis metrics (port 9121)
#   - Nginx Exporter: Nginx metrics (port 9113)
#
# Usage:
#   docker compose up -d
#   Access PostgreSQL: psql -h localhost -U postgres
#   Access Redis: redis-cli -h localhost
#   Access Nginx: http://localhost

networks:
  infrastructure:
    driver: bridge
  monitoring:
    external: true  # Connect to observability stack

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

services:
  # =============================================================================
  # PostgreSQL - Relational Database
  # =============================================================================
  postgres:
    image: postgres:16-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      # Database configuration
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-app}

      # Performance tuning
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"

      # Logging
      POSTGRES_LOG_STATEMENT: ${POSTGRES_LOG_STATEMENT:-all}
      POSTGRES_LOG_DURATION: ${POSTGRES_LOG_DURATION:-on}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
      - ./postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - infrastructure
      - monitoring
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command:
      - postgres
      - -c
      - config_file=/etc/postgresql/postgresql.conf

  # =============================================================================
  # PostgreSQL Exporter - Metrics for Prometheus
  # =============================================================================
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-app}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: /etc/postgres_exporter/queries.yml
    volumes:
      - ./postgres/queries.yml:/etc/postgres_exporter/queries.yml:ro
    ports:
      - "9187:9187"
    networks:
      - infrastructure
      - monitoring
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Redis - Cache and Message Broker
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command:
      - redis-server
      - /etc/redis/redis.conf
      - --requirepass
      - ${REDIS_PASSWORD:-redis}
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - infrastructure
      - monitoring
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # =============================================================================
  # Redis Exporter - Metrics for Prometheus
  # =============================================================================
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis}
    ports:
      - "9121:9121"
    networks:
      - infrastructure
      - monitoring
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9121/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Nginx - Reverse Proxy and Load Balancer
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - infrastructure
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - redis

  # =============================================================================
  # Nginx Exporter - Metrics for Prometheus
  # =============================================================================
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx-exporter
    restart: unless-stopped
    command:
      - -nginx.scrape-uri=http://nginx:80/nginx_status
    ports:
      - "9113:9113"
    networks:
      - infrastructure
      - monitoring
    depends_on:
      - nginx
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9113/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # PgAdmin - PostgreSQL Web UI (Optional)
  # =============================================================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - ./postgres/pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - infrastructure
    depends_on:
      - postgres
    profiles:
      - tools  # Only start with: docker compose --profile tools up

  # =============================================================================
  # Redis Commander - Redis Web UI (Optional)
  # =============================================================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD:-redis}
    ports:
      - "8081:8081"
    networks:
      - infrastructure
    depends_on:
      - redis
    profiles:
      - tools  # Only start with: docker compose --profile tools up
