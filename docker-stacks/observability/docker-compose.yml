version: '3.8'

# Observability Stack - Grafana + Prometheus + Loki + Alloy + Alertmanager
# Complete monitoring, logging, and alerting solution for VPS
#
# Services:
#   - Grafana: Visualization and dashboards (port 3000)
#   - Prometheus: Metrics collection and storage (port 9090)
#   - Loki: Log aggregation (port 3100)
#   - Alloy: Universal telemetry collector (port 12345)
#   - Alertmanager: Alert routing and management (port 9093)
#   - Promtail: Log shipper for Loki
#
# Usage:
#   docker compose up -d
#   Access Grafana: http://localhost:3000 (admin/admin)
#   Access Prometheus: http://localhost:9090
#   Access Alertmanager: http://localhost:9093

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  alertmanager_data:
    driver: local

services:
  # =============================================================================
  # Prometheus - Metrics Collection
  # =============================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    user: "65534:65534"  # nobody user
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring
    depends_on:
      - alertmanager
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Alertmanager - Alert Management
  # =============================================================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    user: "65534:65534"  # nobody user
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    volumes:
      - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Loki - Log Aggregation
  # =============================================================================
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    user: "10001:10001"  # loki user
    command: -config.file=/etc/loki/loki.yml
    volumes:
      - ./loki/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/loki
    ports:
      - "3100:3100"
    networks:
      - monitoring
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # Promtail - Log Shipper
  # =============================================================================
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    user: "0:0"  # root needed to read docker logs
    command: -config.file=/etc/promtail/promtail.yml
    volumes:
      - ./loki/promtail.yml:/etc/promtail/promtail.yml:ro
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - monitoring
    depends_on:
      - loki

  # =============================================================================
  # Grafana Alloy - Universal Telemetry Collector
  # =============================================================================
  alloy:
    image: grafana/alloy:latest
    container_name: alloy
    restart: unless-stopped
    user: "0:0"  # root for system metrics
    command:
      - run
      - /etc/alloy/config.alloy
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
    volumes:
      - ./alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /:/rootfs:ro
      - /sys:/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - "12345:12345"
    networks:
      - monitoring
    depends_on:
      - prometheus
      - loki
    environment:
      HOSTNAME: ${HOSTNAME:-vps}
    privileged: true  # Required for full system metrics

  # =============================================================================
  # Grafana - Visualization
  # =============================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: "472:472"  # grafana user
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3000:3000"
    networks:
      - monitoring
    environment:
      # Security
      GF_SECURITY_ADMIN_USER: ${GF_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_ADMIN_PASSWORD:-admin}
      GF_SECURITY_SECRET_KEY: ${GF_SECRET_KEY:-change_me_please}

      # Server
      GF_SERVER_ROOT_URL: ${GF_SERVER_ROOT_URL:-http://localhost:3000}
      GF_SERVER_DOMAIN: ${GF_SERVER_DOMAIN:-localhost}

      # Database (SQLite by default, can use Postgres)
      GF_DATABASE_TYPE: ${GF_DATABASE_TYPE:-sqlite3}

      # Auth
      GF_AUTH_ANONYMOUS_ENABLED: "false"
      GF_AUTH_DISABLE_LOGIN_FORM: "false"

      # Datasources
      GF_INSTALL_PLUGINS: ${GF_INSTALL_PLUGINS:-}

      # Features
      GF_FEATURE_TOGGLES_ENABLE: ${GF_FEATURES:-}

      # Alerting
      GF_UNIFIED_ALERTING_ENABLED: "true"
      GF_ALERTING_ENABLED: "false"  # Disable legacy alerting
    depends_on:
      - prometheus
      - loki
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # =============================================================================
  # Node Exporter - System Metrics (for Prometheus)
  # =============================================================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netclass.ignored-devices=^(veth.*|br.*|docker.*|lo)$$'
      - '--collector.netdev.device-exclude=^(veth.*|br.*|docker.*|lo)$$'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - monitoring
    pid: host

  # =============================================================================
  # cAdvisor - Container Metrics
  # =============================================================================
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    devices:
      - /dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /dev/disk:/dev/disk:ro
    ports:
      - "8080:8080"
    networks:
      - monitoring
    command:
      - '--housekeeping_interval=30s'
      - '--docker_only=true'
      - '--storage_duration=1m0s'
