# Promtail Configuration
# Log shipping to Loki

server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: info

# Loki client configuration
clients:
  - url: http://loki:3100/loki/api/v1/push
    batchwait: 1s
    batchsize: 1048576  # 1MB
    timeout: 10s
    backoff_config:
      min_period: 500ms
      max_period: 5m
      max_retries: 10

positions:
  filename: /tmp/positions.yaml

# Scrape configurations
scrape_configs:
  # ============================================================================
  # System Logs
  # ============================================================================
  - job_name: system
    static_configs:
      - targets:
          - localhost
        labels:
          job: system
          __path__: /var/log/*.log

  # ============================================================================
  # Docker Container Logs
  # ============================================================================
  - job_name: docker
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      # Extract container name
      - source_labels: ['__meta_docker_container_name']
        regex: '/(.*)'
        target_label: 'container'

      # Extract container ID
      - source_labels: ['__meta_docker_container_id']
        target_label: 'container_id'

      # Extract compose project
      - source_labels: ['__meta_docker_container_label_com_docker_compose_project']
        target_label: 'compose_project'

      # Extract compose service
      - source_labels: ['__meta_docker_container_label_com_docker_compose_service']
        target_label: 'service'

      # Extract image
      - source_labels: ['__meta_docker_container_label_com_docker_compose_image']
        target_label: 'image'

      # Set log path
      - source_labels: ['__meta_docker_container_id']
        target_label: '__path__'
        replacement: '/var/lib/docker/containers/$1/*.log'

    # Pipeline stages for log processing
    pipeline_stages:
      # Parse Docker JSON logs
      - json:
          expressions:
            output: log
            stream: stream
            time: time

      # Parse timestamp
      - timestamp:
          source: time
          format: RFC3339Nano

      # Extract log level from message
      - regex:
          expression: '(?i)(?P<level>debug|info|warn|error|fatal|panic)'
          source: output

      # Set log level label
      - labels:
          level:

      # Output the log message
      - output:
          source: output

  # ============================================================================
  # Nginx Access Logs
  # ============================================================================
  - job_name: nginx-access
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          log_type: access
          __path__: /var/log/nginx/access.log
    pipeline_stages:
      # Parse nginx access log
      - regex:
          expression: '^(?P<remote_addr>[\w\.]+) - (?P<remote_user>[^ ]*) \[(?P<time_local>.*)\] "(?P<method>[^ ]*) (?P<path>[^ ]*) (?P<protocol>[^ ]*)" (?P<status>[\d]+) (?P<body_bytes_sent>[\d]+) "(?P<http_referer>[^"]*)" "(?P<http_user_agent>[^"]*)"'
      - labels:
          method:
          status:
          path:

  # ============================================================================
  # Nginx Error Logs
  # ============================================================================
  - job_name: nginx-error
    static_configs:
      - targets:
          - localhost
        labels:
          job: nginx
          log_type: error
          __path__: /var/log/nginx/error.log
    pipeline_stages:
      # Parse nginx error log
      - regex:
          expression: '^(?P<time>\d{4}/\d{2}/\d{2} \d{2}:\d{2}:\d{2}) \[(?P<level>\w+)\] (?P<message>.*)'
      - labels:
          level:

  # ============================================================================
  # Application Logs (FastAPI example)
  # ============================================================================
  - job_name: fastapi
    static_configs:
      - targets:
          - localhost
        labels:
          job: fastapi
          application: backend
          __path__: /var/log/app/*.log
    pipeline_stages:
      # Parse JSON logs from FastAPI
      - json:
          expressions:
            timestamp: timestamp
            level: level
            logger: logger
            message: message
            request_id: request_id
            user_id: user_id
      - timestamp:
          source: timestamp
          format: RFC3339
      - labels:
          level:
          logger:
      - output:
          source: message

  # ============================================================================
  # Celery Logs
  # ============================================================================
  - job_name: celery
    static_configs:
      - targets:
          - localhost
        labels:
          job: celery
          application: backend
          __path__: /var/log/celery/*.log
    pipeline_stages:
      # Parse Celery logs
      - regex:
          expression: '^\[(?P<timestamp>.*?)\: (?P<level>\w+)/(?P<worker>.*?)\] (?P<message>.*)'
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05,000'
      - labels:
          level:
          worker:

  # ============================================================================
  # PostgreSQL Logs
  # ============================================================================
  - job_name: postgresql
    static_configs:
      - targets:
          - localhost
        labels:
          job: postgresql
          __path__: /var/log/postgresql/*.log
    pipeline_stages:
      # Parse PostgreSQL logs
      - regex:
          expression: '^(?P<timestamp>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\.\d{3}) (?P<timezone>\w+) \[(?P<pid>\d+)\] (?P<user>\w+)@(?P<database>\w+) (?P<level>\w+):  (?P<message>.*)'
      - timestamp:
          source: timestamp
          format: '2006-01-02 15:04:05.000'
      - labels:
          level:
          database:

  # ============================================================================
  # Redis Logs
  # ============================================================================
  - job_name: redis
    static_configs:
      - targets:
          - localhost
        labels:
          job: redis
          __path__: /var/log/redis/*.log
    pipeline_stages:
      # Parse Redis logs
      - regex:
          expression: '^(?P<pid>\d+):(?P<role>\w+) (?P<timestamp>\d+ \w+ \d{2}:\d{2}:\d{2}\.\d{3}) (?P<level>[*#\-\.]) (?P<message>.*)'
      - labels:
          level:
          role:
