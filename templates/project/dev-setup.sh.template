#!/usr/bin/env bash
set -e

# Project Development Setup Script
# Generated from: ~/dev/projects/dotfiles/templates/project/dev-setup.sh.template
#
# This script automates project setup including:
# - Git fetch/pull
# - Secret injection from 1Password
# - R2 asset synchronization (FASE 2.5)
# - Project-specific setup (customize section 5)

PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
PROJECT_NAME="$(basename "$PROJECT_ROOT")"
DOTFILES_DIR="$HOME/dev/projects/dotfiles"

# Auto-detect 1Password vault from project name (TYPE-ProjectName → TYPE-ProjectName vault)
# This assumes you have a vault named after your project (e.g., APP-Discreto)
# Override by setting OP_VAULT environment variable before running
OP_VAULT="${OP_VAULT:-$PROJECT_NAME}"

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Logging functions
log_step() {
    echo ""
    echo -e "${BLUE}==>${NC} $*"
    echo ""
}

log_info() {
    echo -e "${BLUE}[INFO]${NC} $*"
}

log_success() {
    echo -e "${GREEN}[✓]${NC} $*"
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $*"
}

log_error() {
    echo -e "${RED}[✗]${NC} $*" >&2
}

cd "$PROJECT_ROOT"

log_step "Setting up $PROJECT_NAME"

# ==============================================================================
# 1. Git fetch/pull
# ==============================================================================
if [ -d ".git" ]; then
    log_step "Git Operations"

    # Check if remote exists
    if git remote get-url origin &> /dev/null; then
        log_info "Fetching from remote..."
        git fetch origin

        # Get current branch
        CURRENT_BRANCH=$(git branch --show-current)

        # Check if branch has upstream
        if git rev-parse --abbrev-ref @{u} &> /dev/null; then
            log_info "Pulling latest changes on branch: $CURRENT_BRANCH"
            git pull origin "$CURRENT_BRANCH"
            log_success "Git updated"
        else
            log_warning "Branch '$CURRENT_BRANCH' has no upstream, skipping pull"
        fi
    else
        log_warning "No git remote configured, skipping fetch/pull"
    fi
else
    log_info "Not a git repository, skipping git operations"
fi

# ==============================================================================
# 2. Inject secrets from 1Password
# ==============================================================================
if [ -f ".env.template" ]; then
    log_step "Secret Injection"
    log_info "Using 1Password vault: $OP_VAULT"

    # Check if 1Password CLI is installed
    if ! command -v op &> /dev/null; then
        log_error "1Password CLI not found. Install with: brew install --cask 1password-cli"
        log_warning "Skipping secret injection"
    else
        # Check if authenticated
        if ! op whoami &> /dev/null 2>&1; then
            log_info "Signing in to 1Password..."
            eval $(op signin)
        fi

        # Verify vault exists
        if ! op vault get "$OP_VAULT" &> /dev/null; then
            log_warning "1Password vault '$OP_VAULT' not found"
            log_info "Available vaults:"
            op vault list --format=json | grep -o '"name":"[^"]*"' | cut -d'"' -f4 | sed 's/^/  - /'
            log_info ""
            log_info "Create vault with: op vault create '$OP_VAULT'"
            log_info "Or set custom vault: export OP_VAULT=YourVaultName"
            log_warning "Skipping secret injection"
        else
            log_success "Vault '$OP_VAULT' found"

            # Check if inject script exists
            if [ -f "$DOTFILES_DIR/scripts/secrets/inject-env.sh" ]; then
                log_info "Injecting secrets from vault '$OP_VAULT'..."
                "$DOTFILES_DIR/scripts/secrets/inject-env.sh" ".env.template" ".env"
                log_success "Secrets injected to .env"
            else
                log_warning "inject-env.sh not found, falling back to op inject"
                if op inject -i .env.template -o .env; then
                    log_success "Secrets injected to .env"
                else
                    log_error "Failed to inject secrets"
                    log_info "Check that .env.template references exist in vault '$OP_VAULT'"
                fi
            fi
        fi
    fi
else
    log_info "No .env.template found, skipping secret injection"
fi

# ==============================================================================
# 3. Sync R2 assets (if manifest exists)
# ==============================================================================
if [ -f ".r2-manifest.yml" ]; then
    log_step "R2 Asset Synchronization"

    # Check if rclone is installed
    if ! command -v rclone &> /dev/null; then
        log_error "Rclone not found. Install with: brew install rclone"
        log_warning "Skipping R2 sync"
    else
        # Check if sync script exists (FASE 2.5)
        if [ -f "$DOTFILES_DIR/scripts/sync/sync-r2.sh" ]; then
            log_info "Syncing assets from R2..."
            "$DOTFILES_DIR/scripts/sync/sync-r2.sh" pull "$PROJECT_NAME"
            log_success "R2 assets synced"
        else
            log_warning "sync-r2.sh not implemented yet (FASE 2.5)"
            log_info "Manifest found: .r2-manifest.yml"
            log_info "Manual sync: rclone sync r2:dotfiles-assets/$PROJECT_NAME/ data/"
        fi
    fi
else
    log_info "No .r2-manifest.yml found, skipping R2 sync"
fi

# ==============================================================================
# 4. Update manifest links (if manifest exists)
# ==============================================================================
if [ -f ".r2-manifest.yml" ]; then
    # Check if update script exists (FASE 2.5)
    if [ -f "$DOTFILES_DIR/scripts/sync/update-manifest.sh" ]; then
        log_info "Updating manifest timestamps..."
        "$DOTFILES_DIR/scripts/sync/update-manifest.sh" "$PROJECT_NAME"
        log_success "Manifest updated"
    fi
fi

# ==============================================================================
# 5. Project-specific setup
# ==============================================================================
log_step "Project-Specific Setup"

# ⚠️  CUSTOMIZE THIS SECTION FOR YOUR PROJECT ⚠️
# Uncomment and modify the commands below based on your project's needs:

# --- Node.js / JavaScript / TypeScript ---
# if [ -f "package.json" ]; then
#     log_info "Installing npm dependencies..."
#     npm install
#     log_success "npm dependencies installed"
# fi

# --- Python ---
# if [ -f "requirements.txt" ]; then
#     log_info "Installing Python dependencies..."
#
#     # Create virtual environment if it doesn't exist
#     if [ ! -d "venv" ]; then
#         python3 -m venv venv
#     fi
#
#     # Activate and install
#     source venv/bin/activate
#     pip install -r requirements.txt
#     log_success "Python dependencies installed"
# fi

# --- Docker ---
# if [ -f "docker-compose.yml" ]; then
#     log_info "Pulling Docker images..."
#     docker compose pull
#     log_success "Docker images pulled"
# fi

# --- Database Migrations ---
# if [ -d "migrations" ]; then
#     log_info "Running database migrations..."
#     # npm run migrate
#     # python manage.py migrate
#     # alembic upgrade head
#     log_success "Migrations complete"
# fi

# --- Build / Compile ---
# if [ -f "Makefile" ]; then
#     log_info "Running build..."
#     make build
#     log_success "Build complete"
# fi

log_info "No project-specific setup configured yet"
log_info "Edit this script to add your project's setup commands"

# ==============================================================================
# Summary
# ==============================================================================
echo ""
log_success "$PROJECT_NAME development environment ready!"
echo ""
echo "Next steps:"
echo "  1. Review .env file for correct secret injection"
echo "  2. Start development server"
echo "  3. Run tests to verify setup"
echo ""

# Optional: Show what was set up
echo "Setup summary:"
[ -d ".git" ] && echo "  ✓ Git repository updated"
[ -f ".env" ] && echo "  ✓ Secrets injected from 1Password"
[ -f ".r2-manifest.yml" ] && echo "  ✓ R2 manifest found (assets ready for sync)"
echo ""
