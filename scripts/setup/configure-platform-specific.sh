#!/usr/bin/env bash
#
# Configure Platform-Specific Settings
# Generates machine-specific configuration files for SSH and Git
# that override stowed defaults based on the detected platform
#
# Usage:
#   ./configure-platform-specific.sh
#   ./configure-platform-specific.sh --force  # Overwrite existing configs

set -e

# Script directory and paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Source utilities
source "$SCRIPT_DIR/../utils/detect-os.sh"

# Colors
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m'

FORCE=false

log_info() { echo -e "${BLUE}ℹ${NC} $1"; }
log_success() { echo -e "${GREEN}✓${NC} $1"; }
log_warning() { echo -e "${YELLOW}⚠${NC} $1"; }

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --force|-f)
            FORCE=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

# Detect OS
OS=$(detect_os)
log_info "Detected platform: $OS"

#
# Configure SSH - Create platform-specific override in config.d/95-platform.conf
#
configure_ssh() {
    local platform_conf="$HOME/.ssh/config.d/95-platform.conf"

    log_info "Configuring SSH for platform: $OS"

    # Check if already exists
    if [ -f "$platform_conf" ] && [ "$FORCE" != "true" ]; then
        log_warning "Platform SSH config already exists, skipping (use --force to overwrite)"
        log_info "Location: $platform_conf"
        return 0
    fi

    # Determine which 1Password config to use
    local op_identity_agent
    case "$OS" in
        macos)
            op_identity_agent="~/Library/Group Containers/2BUA8C4S2C.com.1password/t/agent.sock"
            ;;
        ubuntu|fedora|linux)
            op_identity_agent="~/.1password/agent.sock"
            ;;
        *)
            log_warning "Unsupported platform for 1Password SSH: $OS"
            return 1
            ;;
    esac

    # Create platform-specific SSH config
    # This file is loaded AFTER the stowed configs (95 sorts after 02)
    # and will override the IdentityAgent setting
    cat > "$platform_conf" << EOF
# Platform-Specific SSH Configuration
# Generated by: configure-platform-specific.sh
# Platform: $OS
# Generated: $(date)
# Location: ~/.ssh/config.d/95-platform.conf
#
# This file is NOT tracked in dotfiles (machine-specific)
# It overrides the 1Password agent path from the stowed config
#
# Note: This file is loaded after 02-1password-*.conf due to
# alphabetical ordering (95 > 02), so it takes precedence

Host *
    # Platform-specific 1Password SSH agent socket
    IdentityAgent $op_identity_agent

# Add machine-specific SSH hosts below:
# ====================================================================

EOF

    log_success "Created platform-specific SSH config for $OS"
    log_info "Location: $platform_conf"
}

#
# Configure Git - Create platform-specific config.local
#
configure_git() {
    local git_config_local="$HOME/.config/git/config.local"

    log_info "Configuring Git for platform: $OS"

    # Check if config.local already exists
    if [ -f "$git_config_local" ] && [ "$FORCE" != "true" ]; then
        log_warning "Git config.local already exists, skipping (use --force to overwrite)"
        log_info "Location: $git_config_local"
        return 0
    fi

    # Determine platform-specific git settings
    local op_ssh_sign_path
    local credential_helper

    case "$OS" in
        macos)
            op_ssh_sign_path="/Applications/1Password.app/Contents/MacOS/op-ssh-sign"
            credential_helper="osxkeychain"
            ;;
        ubuntu|fedora|linux)
            # Check for op-ssh-sign in common locations
            if [ -f "/opt/1Password/op-ssh-sign" ]; then
                op_ssh_sign_path="/opt/1Password/op-ssh-sign"
            elif [ -f "/usr/bin/op-ssh-sign" ]; then
                op_ssh_sign_path="/usr/bin/op-ssh-sign"
            else
                op_ssh_sign_path="/opt/1Password/op-ssh-sign"  # Default fallback
            fi
            credential_helper="cache --timeout=3600"
            ;;
        *)
            log_warning "Unsupported platform for Git config: $OS"
            return 1
            ;;
    esac

    # Create config.local
    cat > "$git_config_local" << EOF
# Machine-Specific Git Configuration
# Generated by: configure-platform-specific.sh
# Platform: $OS
# Generated: $(date)
# Location: ~/.config/git/config.local (XDG Base Directory)
#
# This file overrides platform-specific settings from the main config
# and is NOT tracked in the dotfiles repository (machine-specific)

[gpg "ssh"]
    # Platform-specific 1Password SSH signing program
    program = $op_ssh_sign_path

[credential]
    # Platform-specific credential helper
    helper = $credential_helper

# Add your machine-specific customizations below:
# ====================================================================

EOF

    log_success "Created Git config.local for $OS"
    log_info "Location: $git_config_local"
    log_info "Edit this file to add machine-specific Git settings"
}

#
# Main execution
#
main() {
    log_info "Setting up platform-specific configurations"
    echo ""

    configure_ssh
    echo ""

    configure_git
    echo ""

    log_success "Platform-specific configuration complete!"
    log_info "Platform: $OS"

    echo ""
    log_info "Next steps:"
    echo "  1. Review: ~/.config/git/config.local"
    echo "  2. Test commit signing: git commit --allow-empty -m 'test signing'"
    echo "  3. Verify: git log --show-signature"
}

main
