# ==============================================================================
# Docker Compose Configuration Template
# ==============================================================================
# This compose file provides a template for local development and testing
# Customize services based on your application requirements
# ==============================================================================

version: '3.8'

services:
  # ===========================================================================
  # Application Service
  # ===========================================================================
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      args:
        NODE_ENV: development
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-latest}
        COMMIT_SHA: ${COMMIT_SHA:-unknown}
    container_name: ${PROJECT_NAME:-app}-main
    restart: unless-stopped
    ports:
      - "${APP_PORT:-3000}:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
    env_file:
      - ../.env
    volumes:
      # Mount source code for development (remove in production)
      - ../src:/app/src:ro
      - ../public:/app/public:ro
      # Mount logs
      - app_logs:/app/logs
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===========================================================================
  # Database Service (PostgreSQL)
  # ===========================================================================
  database:
    image: postgres:15-alpine
    container_name: ${PROJECT_NAME:-app}-db
    restart: unless-stopped
    ports:
      - "${DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DB_NAME:-app_db}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-app_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ===========================================================================
  # Redis Service (Caching)
  # ===========================================================================
  redis:
    image: redis:7-alpine
    container_name: ${PROJECT_NAME:-app}-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --replica-read-only no
    volumes:
      - redis_data:/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 30s

  # ===========================================================================
  # Nginx Reverse Proxy (Optional)
  # ===========================================================================
  nginx:
    image: nginx:alpine
    container_name: ${PROJECT_NAME:-app}-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================================================
  # Development Services (uncomment for development)
  # ===========================================================================
  
  # # Database Admin Interface
  # adminer:
  #   image: adminer
  #   container_name: ${PROJECT_NAME:-app}-adminer
  #   restart: unless-stopped
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     ADMINER_DEFAULT_SERVER: database
  #   depends_on:
  #     - database
  #   networks:
  #     - app_network

  # # Redis Admin Interface
  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: ${PROJECT_NAME:-app}-redis-admin
  #   restart: unless-stopped
  #   ports:
  #     - "8081:8081"
  #   environment:
  #     REDIS_HOSTS: local:redis:6379
  #   depends_on:
  #     - redis
  #   networks:
  #     - app_network

# =============================================================================
# Networks
# =============================================================================
networks:
  app_network:
    driver: bridge
    name: ${PROJECT_NAME:-app}_network

# =============================================================================
# Volumes
# =============================================================================
volumes:
  postgres_data:
    name: ${PROJECT_NAME:-app}_postgres_data
  redis_data:
    name: ${PROJECT_NAME:-app}_redis_data
  app_logs:
    name: ${PROJECT_NAME:-app}_logs
  nginx_logs:
    name: ${PROJECT_NAME:-app}_nginx_logs