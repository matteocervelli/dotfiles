#!/usr/bin/env python3
"""
XDG-Compliant Python History Configuration

This file redirects Python interactive history to XDG_STATE_HOME instead of ~/.python_history

Usage:
    export PYTHONSTARTUP="$XDG_CONFIG_HOME/python/pythonrc"

WARNING: This is optional and comes with risks:
- May create dual history files if not configured correctly
- Affects ALL Python interactive sessions
- Virtual environments might bypass this

Only enable if you understand the implications and actively use Python interactively.

Documentation: ../../../docs/xdg-compliance.md#python-history
"""

import atexit
import os
import sys
from pathlib import Path

try:
    import readline
except ImportError:
    # readline not available (Windows, or Python built without readline)
    pass
else:
    # Configure XDG-compliant history file
    state_home = os.getenv('XDG_STATE_HOME')
    if not state_home:
        state_home = str(Path.home() / '.local' / 'state')

    history_file = Path(state_home) / 'python' / 'history'

    # Create directory if it doesn't exist
    history_file.parent.mkdir(parents=True, exist_ok=True)

    # Read history from XDG location
    if history_file.exists():
        try:
            readline.read_history_file(str(history_file))
        except OSError:
            # History file corrupted or unreadable
            pass

    # Limit history to 10,000 entries
    readline.set_history_length(10000)

    # Write history to XDG location on exit
    atexit.register(readline.write_history_file, str(history_file))

    # Disable default history file
    # This prevents Python from writing to ~/.python_history
    if hasattr(sys, '__interactivehook__'):
        # Save original hook
        original_hook = sys.__interactivehook__

        def custom_hook():
            # Call original hook but skip default history setup
            import site
            if hasattr(site, 'enablerlcompleter'):
                # enablerlcompleter() sets up history, but we've already done it
                # Just enable tab completion
                readline.parse_and_bind('tab: complete')

        sys.__interactivehook__ = custom_hook
