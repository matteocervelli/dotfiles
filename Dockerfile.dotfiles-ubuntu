# Dockerfile.dotfiles-ubuntu
# Multi-stage Ubuntu base image with dotfiles configuration
#
# Profiles:
#   - minimal: Shell + Git configuration only (default)
#   - dev: Minimal + development tools (Python, Node.js)
#
# Build:
#   docker build -f Dockerfile.dotfiles-ubuntu -t dotfiles-ubuntu:minimal .
#   docker build -f Dockerfile.dotfiles-ubuntu --target dev -t dotfiles-ubuntu:dev .
#
# Multi-arch:
#   docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile.dotfiles-ubuntu -t dotfiles-ubuntu:minimal .
#
# Size Goal: < 500MB with dotfiles
# Startup Time: < 2 seconds

# =============================================================================
# Stage 1: Base - Essential tools only
# =============================================================================
FROM ubuntu:24.04 AS base

# Metadata
LABEL maintainer="Matteo Cervelli"
LABEL description="Ubuntu 24.04 with minimal dotfiles (shell + git)"
LABEL version="1.0"
LABEL profile="container-minimal"
LABEL issue="https://github.com/matteocervelli/dotfiles/issues/44"

# Prevent interactive prompts during package installation
ENV DEBIAN_FRONTEND=noninteractive

# Set timezone to avoid tzdata prompt
ENV TZ=UTC
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Install essential packages
# Note: Keep this list minimal for size optimization
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Core tools
    ca-certificates \
    curl \
    wget \
    git \
    gnupg \
    # Shell
    zsh \
    bash-completion \
    # GNU Stow for dotfiles management
    stow \
    # Minimal utilities
    vim \
    nano \
    tree \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create user 'developer' with UID 1000 (standard for Docker)
# This allows seamless file permissions when mounting host volumes
RUN useradd -m -s /bin/zsh -u 1000 developer && \
    echo "developer:developer" | chpasswd && \
    usermod -aG sudo developer 2>/dev/null || true

# Switch to developer user
USER developer
WORKDIR /home/developer

# Install Oh My Zsh for developer user
RUN sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

# Copy dotfiles repository (minimal packages only)
# We'll use a careful copy strategy to avoid bloating the image
COPY --chown=developer:developer stow-packages/shell /home/developer/dotfiles/stow-packages/shell
COPY --chown=developer:developer stow-packages/git /home/developer/dotfiles/stow-packages/git
COPY --chown=developer:developer scripts/utils /home/developer/dotfiles/scripts/utils

# Install minimal dotfiles using GNU Stow
RUN cd /home/developer/dotfiles && \
    stow -t /home/developer -d stow-packages shell && \
    stow -t /home/developer -d stow-packages git

# Copy entrypoint script
COPY --chown=developer:developer docker/entrypoint-minimal.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Set ZSH as default shell
ENV SHELL=/bin/zsh

# Expose common development ports (optional, can be overridden)
# These are documented but not strictly necessary for the minimal image
# EXPOSE 3000 8000 8080

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
CMD ["/bin/zsh"]

# =============================================================================
# Stage 2: Minimal (default target) - Alias for base
# =============================================================================
FROM base AS minimal

LABEL profile="container-minimal"
LABEL description="Minimal Ubuntu container with shell + git dotfiles only"

# This is just an alias for the base stage
# Allows explicit: docker build --target minimal

# =============================================================================
# Stage 3: Development - Base + dev tools
# =============================================================================
FROM base AS dev

LABEL profile="container-dev"
LABEL description="Development Ubuntu container with languages and tools"

# Switch back to root for package installation
USER root

# Install development tools and language runtimes
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Build tools
    build-essential \
    autoconf \
    cmake \
    gcc \
    g++ \
    make \
    pkg-config \
    # Python
    python3 \
    python3-pip \
    python3-venv \
    pipx \
    # Node.js (from Ubuntu repos, version 18.x)
    nodejs \
    npm \
    # Database clients
    postgresql-client \
    sqlite3 \
    # Modern CLI tools
    ripgrep \
    fd-find \
    bat \
    fzf \
    jq \
    # Monitoring
    htop \
    # Additional utilities
    tmux \
    moreutils \
    # Cleanup
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Install pyenv for Python version management
USER developer
WORKDIR /home/developer

RUN git clone https://github.com/pyenv/pyenv.git /home/developer/.pyenv && \
    echo 'export PYENV_ROOT="$HOME/.pyenv"' >> /home/developer/.zshrc && \
    echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> /home/developer/.zshrc && \
    echo 'eval "$(pyenv init -)"' >> /home/developer/.zshrc

# Install nvm for Node.js version management
RUN curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash && \
    echo 'export NVM_DIR="$HOME/.nvm"' >> /home/developer/.zshrc && \
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> /home/developer/.zshrc

# Copy additional dev packages (if available)
# This is optional - only if dev-env package exists
COPY --chown=developer:developer stow-packages/dev-env /home/developer/dotfiles/stow-packages/dev-env
RUN cd /home/developer/dotfiles && \
    (stow -t /home/developer -d stow-packages dev-env 2>/dev/null || true)

# Update entrypoint for dev variant
COPY --chown=developer:developer docker/entrypoint-dev.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Common development ports
EXPOSE 3000 8000 8080 5432 6379

# =============================================================================
# Stage 4: Production - Minimal optimized for production use
# =============================================================================
FROM minimal AS production

LABEL profile="container-production"
LABEL description="Production-optimized minimal container"

# Additional production-specific configuration can go here
# For now, it's identical to minimal but can diverge in the future

# Example production hardening (commented for now):
# - Remove package managers
# - Disable unnecessary services
# - Set read-only filesystem

# =============================================================================
# Build Instructions
# =============================================================================
#
# Build minimal (default):
#   docker build -f Dockerfile.dotfiles-ubuntu -t dotfiles-ubuntu:minimal .
#
# Build development variant:
#   docker build -f Dockerfile.dotfiles-ubuntu --target dev -t dotfiles-ubuntu:dev .
#
# Build production variant:
#   docker build -f Dockerfile.dotfiles-ubuntu --target production -t dotfiles-ubuntu:production .
#
# Multi-architecture build:
#   docker buildx create --use
#   docker buildx build --platform linux/amd64,linux/arm64 \
#     -f Dockerfile.dotfiles-ubuntu -t dotfiles-ubuntu:minimal .
#
# Run container:
#   docker run -it --rm dotfiles-ubuntu:minimal
#   docker run -it --rm -v $(pwd):/workspace dotfiles-ubuntu:dev
#
# Size verification:
#   docker images dotfiles-ubuntu
#
# Startup time test:
#   time docker run --rm dotfiles-ubuntu:minimal echo "Ready"
#
